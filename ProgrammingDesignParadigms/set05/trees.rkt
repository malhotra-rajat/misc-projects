#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 70 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 1
#"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 43 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1           0 3719 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 183
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e trees) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#"
 #"t constructor repeating-decimal #f #t none #f ())))"
) 0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 16 #"rackunit/text-ui"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 19 3 12 #"\"extras.rkt\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 13 #"initial-world"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 3 #"run"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 23 #"world-after-mouse-event"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 21 #"world-after-key-event"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 14 #"world-to-roots"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 14 #"node-to-center"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 12 #"node-to-sons"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 17 #"node-to-selected?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; CONSTANTS"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"LENGTH"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"INFINITE-MAX"
0 0 23 3 1 #" "
0 0 20 3 11 #"99999999999"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"LEFT-OFFSET"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"  "
0 0 14 3 6 #"LENGTH"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"DOWN-OFFSET"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #"  "
0 0 14 3 6 #"LENGTH"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"LEFT-BOUNDARY"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 11 #"LEFT-OFFSET"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 6 #"LENGTH"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 15 #"UNSEL-RECTANGLE"
0 0 23 3 4 #"   ("
0 0 14 3 9 #"rectangle"
0 0 23 3 1 #" "
0 0 14 3 6 #"LENGTH"
0 0 23 3 1 #" "
0 0 14 3 6 #"LENGTH"
0 0 23 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 19 #"SEL-GREEN-RECTANGLE"
0 0 23 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 23 3 1 #" "
0 0 14 3 6 #"LENGTH"
0 0 23 3 1 #" "
0 0 14 3 6 #"LENGTH"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 17 #"SEL-RED-RECTANGLE"
0 0 23 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 23 3 1 #" "
0 0 14 3 6 #"LENGTH"
0 0 23 3 1 #" "
0 0 14 3 6 #"LENGTH"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 23 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 23 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 23 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 23 3 1 #" "
0 0 14 3 8 #"children"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 14 #"; A Node is a "
0 0 23 29 1 #"\n"
0 0 17 3 48 #"; (make-tree Number Number Boolean ListOf<Node>)"
0 0 23 29 1 #"\n"
0 0 17 3 17 #"; interpretation:"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; -- x is the x coordinate of the center of the rectangle"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; -- y is the y coordiante of the center of the rectangle"
0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #"; -- selected? is a boolean value which indicates whether the tree i"
 #"s selected."
) 0 0 23 29 1 #"\n"
0 0 17 3 77
(
 #"; -- children is a ListOf<Node> which represents the subtree of the "
 #"tree's ch"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; TEMPLATE:"
0 0 23 29 1 #"\n"
0 0 17 3 22 #"; node-fn : Node -> ??"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";(define (node-fn n)"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";  (...(node-x n) (node-y n) "
0 0 23 29 1 #"\n"
0 0 17 3 45 #";      (node-selected? n) (node-children n)))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #"; A ListOf<Node> (LON) is either "
0 0 23 29 1 #"\n"
0 0 17 3 48 #"; -- empty              interp: the LON is empty"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; -- (cons Node LON)    interp: LON has at least one Node"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; TEMPLATE:"
0 0 23 29 1 #"\n"
0 0 17 3 31 #"; nodes-fn : ListOf<Node> -> ??"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";(define (nodes-fn ns)"
0 0 23 29 1 #"\n"
0 0 17 3 8 #";  (cond"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";    [(empty? ns) ...]"
0 0 23 29 1 #"\n"
0 0 17 3 11 #";    [else "
0 0 23 29 1 #"\n"
0 0 17 3 31 #";      (...(node-fn (first ns))"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";          (nodes-fn (rest ns)))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; A World is a ListOf<Node> (LON)."
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; the world is a LON where every node must be"
0 0 23 29 1 #"\n"
0 0 17 3 14 #"; a root node."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #"; MyMouseEvent is partition of "
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; -- \"button-down\"          interp: the node may be selected"
0 0 23 29 1 #"\n"
0 0 17 3 72
(
 #"; -- \"drag\"                 interp: the node maybe draged with the"
 #" mouse"
) 0 0 23 29 1 #"\n"
0 0 17 3 61
#"; -- \"button-up\"            interp: the node may be unselectd"
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; -- any other mouse event  interp: these events are ignored"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; TEMPLATE:"
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; mev-fn : MyMouseEvent -> ??"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";(define (mev-fn mev)"
0 0 23 29 1 #"\n"
0 0 17 3 8 #";  (cond"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";    [(mouse=? mev \"button-down\") ...]"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";    [(mouse=? mev \"drag\") ...]"
0 0 23 29 1 #"\n"
0 0 17 3 36 #";    [(mouse=? mev \"button-up\") ...]"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";    [else ...]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 41 #"; MyKeyEvent is a KeyEvent that is one of"
0 0 23 29 1 #"\n"
0 0 17 3 65
#"; -- \"t\"                  interp: creates a new root node in the "
0 0 23 29 1 #"\n"
0 0 17 3 65
#";                                 center of the top of the canvas"
0 0 23 29 1 #"\n"
0 0 17 3 78
(
 #"; -- \"n\"                  interp: add a new node according to the "
 #"requirement."
) 0 0 23 29 1 #"\n"
0 0 17 3 78
(
 #"; -- \"d\"                  interp: Hitting \"d\" while a node is se"
 #"lected deletes"
) 0 0 23 29 1 #"\n"
0 0 17 3 65
#";                                 the node and its whole subtree."
0 0 23 29 1 #"\n"
0 0 17 3 42 #"; -- any other key event  interp: ignored."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; TEMPLATE:"
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; kev-fn : MyKeyEvent -> ??"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";(define (kev-fn kev)"
0 0 23 29 1 #"\n"
0 0 17 3 8 #";  (cond"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";    [(key=? kev \"t\") ...]"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";    [(key=? kev \"n\") ...]"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";    [(key=? kev \"d\") ...]"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";    [else ...]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 22 #"; Examples for testing"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-3"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"80"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"node1-1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-1"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-2"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-3"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"node1-2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"70"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-4"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"80"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 5 #")))) "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"node2-1-image"
0 0 23 3 2 #" ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 17 #"SEL-RED-RECTANGLE"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"node1-2-image"
0 0 23 3 2 #" ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 15 #"UNSEL-RECTANGLE"
0 0 23 3 1 #" "
0 0 20 3 2 #"70"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 30 #"blue-line-image-80-400-200-200"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"scene+line"
0 0 23 3 1 #" "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 23 3 1 #" "
0 0 20 3 2 #"80"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"init-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 30 #"; initial-world : Any -> World"
0 0 23 29 1 #"\n"
0 0 17 3 18 #"; GIVEN: any value"
0 0 23 29 1 #"\n"
0 0 17 3 58
#"; RETURNS: an initial world.  The given value is ignored. "
0 0 23 29 1 #"\n"
0 0 17 3 57 #";         The initial-world is an empty ListOf<Node> list"
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; EXAMPLES: See tests below"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; Strategy: Domain Knowledge"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 14 3 3 #"any"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 7 #"; TESTS"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 17 #"define-test-suite"
0 0 23 3 1 #" "
0 0 14 3 19 #"initial-world-tests"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 23 3 2 #") "
0 0 14 3 10 #"init-world"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 19 3 53 #"\"initial-world error! should be an empty list of LON\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 10 #"init-world"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 19 3 53 #"\"initial-world error! should be an empty list of LON\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"run-tests"
0 0 23 3 1 #" "
0 0 14 3 19 #"initial-world-tests"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 21 #"; run :  Any -> World"
0 0 23 29 1 #"\n"
0 0 17 3 18 #"; GIVEN: any value"
0 0 23 29 1 #"\n"
0 0 17 3 41 #"; EFFECT: runs a copy of an initial world"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #"; RETURNS: the final state of the world.  The given value is ignored"
 #"."
) 0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";   (run 1) => the world starts"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";   (run 2) => the world starts"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 3 #"run"
0 0 23 3 1 #" "
0 0 14 3 3 #"any"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"big-bang"
0 0 23 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 23 3 1 #" "
0 0 14 3 3 #"any"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 7 #"on-draw"
0 0 23 3 1 #" "
0 0 14 3 12 #"world->scene"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 8 #"on-mouse"
0 0 23 3 1 #" "
0 0 14 3 23 #"world-after-mouse-event"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 6 #"on-key"
0 0 23 3 1 #" "
0 0 14 3 21 #"world-after-key-event"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; place-node : Node Scene -> Scene"
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; GIVEN: a node and a scene"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #"; RETURNS: add the image of node and the connections between the nod"
 #"e"
) 0 0 23 29 1 #"\n"
0 0 17 3 37 #"; and children on the original scene."
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; EXAMPLES:  "
0 0 23 29 1 #"\n"
0 0 17 3 54 #";   (place-node node2-1 EMPTY-CANVAS) => node2-1-image"
0 0 23 29 1 #"\n"
0 0 17 3 54 #";   (place-node node1-2 EMPTY-CANVAS) => node1-2-image"
0 0 23 29 1 #"\n"
0 0 17 3 32 #"; STRATEGY: Function Composition"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"place-node"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 14 #"node-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 19 #"place-selected-node"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 21 #"place-unselected-node"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 43 #"; place-selected-node : Node Scene -> Scene"
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; GIVEN: a node and a scene"
0 0 23 29 1 #"\n"
0 0 17 3 64
#"; RETURNS: add the image of node (selected) and the connections "
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; between the node and children on the original scene."
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; EXAMPLES:  "
0 0 23 29 1 #"\n"
0 0 17 3 54 #";   (place-node node2-1 EMPTY-CANVAS) => node2-1-image"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; STRATEGY: Struct Decomp on n : Node"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 19 #"place-selected-node"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 16 #"draw-connections"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 11 #"place-image"
0 0 23 3 2 #" ("
0 0 14 3 19 #"selected-node-image"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 11 #"place-nodes"
0 0 23 3 2 #" ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 1 #"s"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; place-unselected-node : Node Scene -> Scene"
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; GIVEN: a node and a scene"
0 0 23 29 1 #"\n"
0 0 17 3 65
#"; RETURNS: add the image of node (unselected) and the connections"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; between the node and children on the original scene."
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; EXAMPLES:  "
0 0 23 29 1 #"\n"
0 0 17 3 54 #";   (place-node node1-2 EMPTY-CANVAS) => node1-2-image"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; STRATEGY: Struct Decomp on n : Node"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 21 #"place-unselected-node"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 16 #"draw-connections"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 15 #"UNSEL-RECTANGLE"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 11 #"place-nodes"
0 0 23 3 2 #" ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 1 #"s"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; place-nodes : LON Scene -> Scene"
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; GIVEN: a LON and a scene."
0 0 23 29 1 #"\n"
0 0 17 3 65
#"; RETURNS: add the image of every node in the LON and connections"
0 0 23 29 1 #"\n"
0 0 17 3 24 #"; on the original scene."
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 61
#";   place-nodes (list node2-1) EMPTY-CANVAS) => node2-1-image"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; STRATEGY: HOFC"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"place-nodes"
0 0 23 3 1 #" "
0 0 14 3 2 #"ns"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 21 #"; Node Scene -> Scene"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 28 #"; GIVEN: a node and a scene."
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 64
#"; RETURNS: the image of the node and the connections between the"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 46 #"; node and its children on the original scene."
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 8 #"ans-rest"
0 0 23 3 3 #") ("
0 0 14 3 10 #"place-node"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 8 #"ans-rest"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 1 #"s"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 2 #"ns"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; selected-node-image : Node -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 15 #"; GIVEN: a node"
0 0 23 29 1 #"\n"
0 0 17 3 63
#"; RETURNS: a image of the selected node. If the node expandable"
0 0 23 29 1 #"\n"
0 0 17 3 55 #"; then returns a green solid rectangle. If the node not"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; expandable, then returns a red solid rectangle."
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; EXAMPLES: (selected-node-image node2-1) => SEL-RED-RECTANGLE"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; STRATEGY: Domain Knowledge"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 19 #"selected-node-image"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 16 #"node-expandable?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 19 #"SEL-GREEN-RECTANGLE"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 17 #"SEL-RED-RECTANGLE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; draw-connections : Number Number LON Scene -> Scene"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; GIVEN: x, y coordinates of a node, LON of the children"
0 0 23 29 1 #"\n"
0 0 17 3 26 #"; of the node and a scene."
0 0 23 29 1 #"\n"
0 0 17 3 64
#"; RETURNS: connections between the node and its direct children."
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; EXAMPLES:"
0 0 23 29 1 #"\n"
0 0 17 3 61
#";   (draw-connections 200 200 (list node2-4) EMPTY-CANVAS) =>"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";   => blue-line-image-80-400-200-200"
0 0 23 29 1 #"\n"
0 0 17 3 43 #"; STRATEGY: HOFC + Struct Decomp on n: Node"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"draw-connections"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 2 #"ns"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 21 #"; Node Scene -> Scene"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 28 #"; GIVEN: a node and a scene."
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 63
#"; RETURNS: add connections between the node and its children to"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 21 #"; the original scene."
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 8 #"ans-rest"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 10 #"scene+line"
0 0 23 3 1 #" "
0 0 14 3 8 #"ans-rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 19 3 6 #"\"blue\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 1 #"s"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 2 #"ns"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; node-expandable? : Node -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 15 #"; GIVEN: a node"
0 0 23 29 1 #"\n"
0 0 17 3 72
(
 #"; RETURNS: whether there is enough space for a child node to be crea"
 #"ted."
) 0 0 23 29 1 #"\n"
0 0 17 3 47 #"; EXAMPLES: (node-expandable? node1-1) => false"
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; STRAGEY: Struct Decomp on n : Node"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"node-expandable?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 2 #" ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 2 #">="
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 13 #"LEFT-BOUNDARY"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 2 #">="
0 0 23 3 2 #" ("
0 0 14 3 11 #"left-most-x"
0 0 23 3 2 #" ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #")) "
0 0 14 3 13 #"LEFT-BOUNDARY"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; left-most-x : LON Number-> Number."
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; GIVEN: a LON and x coordiate of its father."
0 0 23 29 1 #"\n"
0 0 17 3 65
#"; RETURNS: the left most x coordinate of all the nodes in the LON"
0 0 23 29 1 #"\n"
0 0 17 3 67
#"; If the father has no children, return the x coordinate of father."
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; EXAMPLES: (left-most-x (list node1-1)) => 40"
0 0 23 29 1 #"\n"
0 0 17 3 44 #"; STRATEGY: HOFC + Struct Decomp on n : Node"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"left-most-x"
0 0 23 3 1 #" "
0 0 14 3 2 #"ns"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 53 #"; GIVEN: a node and the x coordinate of previous node"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 50 #"; RETURNS: the smaller one of pos-x of node and x."
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 7 #"ans-min"
0 0 23 3 3 #") ("
0 0 14 3 3 #"min"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 7 #"ans-min"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 12 #"INFINITE-MAX"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 2 #"ns"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #"; world->scene : World -> Scene"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN: a World"
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; RETURNS: a scene with the world placed on it"
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; EXAMPLES: See tests below"
0 0 23 29 1 #"\n"
0 0 17 3 32 #"; STRATEGY: Function Composition"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"world->scene"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 11 #"place-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 8 #"; TESTS:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 17 #"define-test-suite"
0 0 23 3 1 #" "
0 0 14 3 18 #"world->scene-tests"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 12 #"world->scene"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node1-2"
0 0 23 3 3 #")) "
0 0 14 3 13 #"node1-2-image"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 19 3 36 #"\"node1-2-image should be the output\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"run-tests"
0 0 23 3 1 #" "
0 0 14 3 18 #"world->scene-tests"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; world-after-button-down : World Number Number -> World"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; GIVEN: a world, x and y coordinate of the mouse event."
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #"; RETURNS: if the event happens within a rectangle then the rectangl"
 #"e"
) 0 0 23 29 1 #"\n"
0 0 17 3 51 #"; is selected. if not, nothing changes to the node."
0 0 23 29 1 #"\n"
0 0 17 3 63
#"; EXAMPLES: (world-after-button-down (list node2-1) 100 100) =>"
0 0 23 29 1 #"\n"
0 0 17 3 75
(
 #"; (list (node2-1)) [No effect since the button-down was outside any "
 #"node]  "
) 0 0 23 29 1 #"\n"
0 0 17 3 32 #"; STRATEGY: Function Composition"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 23 #"world-after-button-down"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 23 #"nodes-after-button-down"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; node-after-button-down : Node Number Number -> Node"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; GIVEN: a Node and x,y coordinate of the mouse click"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; RETURNS: a new Node. If the mouse clicks on a node,"
0 0 23 29 1 #"\n"
0 0 17 3 31 #"; that node is marked selected."
0 0 23 29 1 #"\n"
0 0 17 3 63
#"; EXAMPLES: (node-after-button-down node2-1 100 100) => node2-1"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; [No effect since the button-down was outside the node]"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; STRATEGY: Struct Decomp on n : Node"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 22 #"node-after-button-down"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 8 #"in-node?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 14 3 4 #"true"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 23 #"nodes-after-button-down"
0 0 23 3 2 #" ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 14 #"node-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 23 #"nodes-after-button-down"
0 0 23 3 2 #" ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; nodes-after-button-down : LON Number Number -> LON"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; GIVEN: a LON, x y coordiante of mouse event"
0 0 23 29 1 #"\n"
0 0 17 3 67
#"; RETURNS: a new LON. if the mouse event occurs in the node of LON."
0 0 23 29 1 #"\n"
0 0 17 3 44 #"; then that node in the new LON is selected."
0 0 23 29 1 #"\n"
0 0 17 3 78
(
 #"; EXAMPLES: (nodes-after-button-down (list node2-1) 100 100) => (lis"
 #"t node2-1)"
) 0 0 23 29 1 #"\n"
0 0 17 3 56 #"; [No effect since the button-down was outside any node]"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; STRATEGY: HOFC"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 23 #"nodes-after-button-down"
0 0 23 3 1 #" "
0 0 14 3 2 #"ns"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 14 #"; Node -> Node"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 15 #"; GIVEN: a node"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 66
#"; RETURNS: a selected node if the button down occurs in that node."
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 22 #"node-after-button-down"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 2 #"ns"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 42 #"; in-node? : Node Number Number -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 50 #"; GIVEN: a node, x y coordiate of the mouse event."
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; RETURNS: a boolean, which answers whether the mouse event occurs"
0 0 23 29 1 #"\n"
0 0 17 3 14 #"; in the node."
0 0 23 29 1 #"\n"
0 0 17 3 47 #"; EXAMPLES: (in-node? node2-1 100 100) => false"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; STRATEGY: Struct Decomp on n : Node"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"in-node?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 2 #"<="
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 6 #"LENGTH"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 14 3 1 #"x"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 6 #"LENGTH"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 2 #"<="
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 6 #"LENGTH"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 14 3 1 #"y"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 6 #"LENGTH"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; world-after-drag : World Number Number -> World"
0 0 23 29 1 #"\n"
0 0 17 3 51 #"; GIVEN: a world, x y coordinate of the mouse event"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; RETURNS:  Dragging a selected node causes the entire tree rooted"
0 0 23 29 1 #"\n"
0 0 17 3 63
#"; at that node to be dragged. The relative positions of all the"
0 0 23 29 1 #"\n"
0 0 17 3 39 #"; nodes in subtree should stay the same"
0 0 23 29 1 #"\n"
0 0 17 3 71
(
 #"; EXAMPLES: (world-after-drag (list node1-2) 100 100) => (list node1"
 #"-2)"
) 0 0 23 29 1 #"\n"
0 0 17 3 55 #"; [No effect since the no node in the list is selected]"
0 0 23 29 1 #"\n"
0 0 17 3 32 #"; STRATEGY: Function Composition"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"world-after-drag"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 16 #"nodes-after-drag"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; node-after-drag : Node Number Number -> Node"
0 0 23 29 1 #"\n"
0 0 17 3 55 #"; GIVEN: a Node, x and y coordinate of the mouse event."
0 0 23 29 1 #"\n"
0 0 17 3 72
(
 #"; RETURNS: dragging a selected Node causes the Node and its children"
 #" to "
) 0 0 23 29 1 #"\n"
0 0 17 3 63
#"; be dragged. Relative position of all the node in the subtree "
0 0 23 29 1 #"\n"
0 0 17 3 23 #"; should stay the same."
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; EXAMPLES: (node-after-drag node1-2 100 100) => node1-2"
0 0 23 29 1 #"\n"
0 0 17 3 42 #"; [No effect since the node is unselected]"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; STRATEGY: Struct Decomp on n : Node"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"node-after-drag"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 14 #"node-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 14 #"node-update-xy"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 4 #")) ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 14 #"node-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 16 #"nodes-after-drag"
0 0 23 3 2 #" ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; node-update-xy : Node Number Number -> Node"
0 0 23 29 1 #"\n"
0 0 17 3 59
#"; GIVEN: a node and diff of x and y coordinate of the node."
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; RETURNS: a new node where all its children are shifted by dx dy."
0 0 23 29 1 #"\n"
0 0 17 3 48 #"; EXAMPLES: (node-update-xy node1-2 100 100) => "
0 0 23 29 1 #"\n"
0 0 17 3 34 #";  (make-node 170 400 false empty)"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; STRATEGY: Struct Decomp on n : Node"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"node-update-xy"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 2 #"dx"
0 0 23 3 1 #" "
0 0 14 3 2 #"dy"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 2 #"dx"
0 0 23 3 3 #") ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 2 #"dy"
0 0 23 3 3 #") ("
0 0 14 3 14 #"node-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 15 #"nodes-update-xy"
0 0 23 3 2 #" ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 2 #"dx"
0 0 23 3 1 #" "
0 0 14 3 2 #"dy"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 44 #"; nodes-update-xy : LON Number Number -> LON"
0 0 23 29 1 #"\n"
0 0 17 3 65
#"; GIVEN: a LON and diff of x and y coordinate of its parent node."
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; RETURNS: a new LON where all its children and itself are shifted"
0 0 23 29 1 #"\n"
0 0 17 3 15 #"; by dx and dy."
0 0 23 29 1 #"\n"
0 0 17 3 55 #"; EXAMPLES: (nodes-update-xy (list node1-2) 100 100) =>"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; (list (make-node 170 400 false empty))"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; STRATEGY: HOFC"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"nodes-update-xy"
0 0 23 3 1 #" "
0 0 14 3 2 #"ns"
0 0 23 3 1 #" "
0 0 14 3 2 #"dx"
0 0 23 3 1 #" "
0 0 14 3 2 #"dy"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 14 #"; Node -> Node"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 16 #"; GIVEN: a node."
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 64
#"; RETURNS: a node where the center of node is shifted by (dx dy)"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 14 #"node-update-xy"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 2 #"dx"
0 0 23 3 1 #" "
0 0 14 3 2 #"dy"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 2 #"ns"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; nodes-after-drag : LON Number Number -> LON"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; GIVEN: a LON, x and y coordinate of the mouse event."
0 0 23 29 1 #"\n"
0 0 17 3 71
(
 #"; RETURNS: if a node in the LON is selected, then the entire tree un"
 #"der"
) 0 0 23 29 1 #"\n"
0 0 17 3 21 #"; that node is moved."
0 0 23 29 1 #"\n"
0 0 17 3 71
(
 #"; EXAMPLES: (nodes-after-drag (list node1-2) 100 100) => (list node1"
 #"-2)"
) 0 0 23 29 1 #"\n"
0 0 17 3 42 #"; [No effect since the node is unselected]"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; STRATEGY: HOFC"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"nodes-after-drag"
0 0 23 3 1 #" "
0 0 14 3 2 #"ns"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 14 #"; Node -> Node"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 16 #"; GIVEN: a node."
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 71
(
 #"; RETURNS: if the node is selected, the entire tree under the node w"
 #"ill"
) 0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 46 #"; be dragged. if not the tree stays unchanged."
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 15 #"node-after-drag"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 2 #"ns"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; world-after-button-up : World Number Number -> World"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; GIVEN: a world and x y coordiantes of the mouse event."
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; RETURNS: if the button up event occurs in a selected node,"
0 0 23 29 1 #"\n"
0 0 17 3 65
#"; then that node in the world becomes unselected. In other cases,"
0 0 23 29 1 #"\n"
0 0 17 3 23 #"; nothing would happen."
0 0 23 29 1 #"\n"
0 0 17 3 76
(
 #"; EXAMPLES: (world-after-button-up (list node2-1) 100 100) => (list "
 #"node2-1)"
) 0 0 23 29 1 #"\n"
0 0 17 3 32 #"; STRATEGY: Function Composition"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 21 #"world-after-button-up"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 21 #"nodes-after-button-up"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 51 #"; node-after-button-up : Node Number Number -> Node"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; GIVEN: a node and x y coordinate of the mouse event"
0 0 23 29 1 #"\n"
0 0 17 3 61
#"; RETURNS: if the node is selected and the mouse event occurs"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; in that node, then the node becomes unselected. else nothing"
0 0 23 29 1 #"\n"
0 0 17 3 22 #"; changes to the node."
0 0 23 29 1 #"\n"
0 0 17 3 61
#"; EXAMPLES: (node-after-button-up node2-1 100 100) => node2-1"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; STRATEGY: Struct Decomp on n : Node"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 20 #"node-after-button-up"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 8 #"in-node?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 21 #"nodes-after-button-up"
0 0 23 3 2 #" ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 14 #"node-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 21 #"nodes-after-button-up"
0 0 23 3 2 #" ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 50 #"; nodes-after-button-up : LON Number Number -> LON"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; GIVEN: a LON and x y coordiante of the mouse event."
0 0 23 29 1 #"\n"
0 0 17 3 48 #"; RETURNS: if a node in the LON is selected then"
0 0 23 29 1 #"\n"
0 0 17 3 47 #"; it becomes unselected. Else, nothing happens."
0 0 23 29 1 #"\n"
0 0 17 3 76
(
 #"; EXAMPLES: (nodes-after-button-up (list node2-1) 100 100) => (list "
 #"node2-1)"
) 0 0 23 29 1 #"\n"
0 0 17 3 16 #"; STRATEYG: HOFC"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 21 #"nodes-after-button-up"
0 0 23 3 1 #" "
0 0 14 3 2 #"ns"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 14 #"; Node -> Node"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 15 #"; GIVEN: a node"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 56 #"; RETURNS: if the button up occurs in the node, the node"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 54 #"; becomes unselected. if not, the node stays the same."
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 20 #"node-after-button-up"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 2 #"ns"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #"; world-after-mouse-event : World Number Number MyMouseEvent -> Worl"
 #"d"
) 0 0 23 29 1 #"\n"
0 0 17 3 74
(
 #"; GIVEN: a world, x y position of mouse event and the type of MyMous"
 #"eEvent"
) 0 0 23 29 1 #"\n"
0 0 17 3 43 #"; RETURNS: the world after the MyMouseEvent"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; and when the button is up, the node becomes unselected."
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; EXAMPLES: See tests below"
0 0 23 29 1 #"\n"
0 0 17 3 48 #"; STRATEGY: Struct Decomp on mev : MyMouseEvent."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 23 #"world-after-mouse-event"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 3 #"mev"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 7 #"mouse=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"mev"
0 0 23 3 1 #" "
0 0 19 3 13 #"\"button-down\""
0 0 23 3 3 #") ("
0 0 14 3 23 #"world-after-button-down"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 7 #"mouse=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"mev"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"drag\""
0 0 23 3 3 #") ("
0 0 14 3 16 #"world-after-drag"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 7 #"mouse=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"mev"
0 0 23 3 1 #" "
0 0 19 3 11 #"\"button-up\""
0 0 23 3 3 #") ("
0 0 14 3 21 #"world-after-button-up"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 8 #"; TESTS:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 17 #"define-test-suite"
0 0 23 3 1 #" "
0 0 14 3 29 #"world-after-mouse-event-tests"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 23 #"world-after-mouse-event"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-1"
0 0 23 3 2 #") "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 19 3 13 #"\"button-down\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 23 #"world-after-button-down"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-1"
0 0 23 3 2 #") "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 19 3 58
#"\"button-down event should call the world-after-button-down"
0 0 19 29 1 #"\n"
0 0 19 3 13 #"    function\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 23 #"world-after-mouse-event"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-1"
0 0 23 3 2 #") "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"drag\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 16 #"world-after-drag"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-1"
0 0 23 3 2 #") "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 19 3 51 #"\"button-down event should call the world-after-drag"
0 0 19 29 1 #"\n"
0 0 19 3 13 #"    function\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 23 #"world-after-mouse-event"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-1"
0 0 23 3 2 #") "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 19 3 11 #"\"button-up\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 21 #"world-after-button-up"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-1"
0 0 23 3 2 #") "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 19 3 56 #"\"button-down event should call the world-after-button-up"
0 0 19 29 1 #"\n"
0 0 19 3 13 #"    function\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 23 #"world-after-mouse-event"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-1"
0 0 23 3 2 #") "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"leave\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 19 3 58
#"\"button-down event should call the world-after-button-down"
0 0 19 29 1 #"\n"
0 0 19 3 13 #"    function\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"run-tests"
0 0 23 3 1 #" "
0 0 14 3 29 #"world-after-mouse-event-tests"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 32 #"; world-after-t : World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 17 #"; GIVEN: a world."
0 0 23 29 1 #"\n"
0 0 17 3 74
(
 #"; RETURNS: creates a new root node in the center of the top of the c"
 #"anvas."
) 0 0 23 29 1 #"\n"
0 0 17 3 68
#"; EXAMPLES: (world-after-t empty) => (make-node 200 10 false empty))"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; STRATEGY: Domain Knowledge"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"world-after-t"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #") ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 6 #"LENGTH"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 32 #"; world-after-n : World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 17 #"; GIVEN: a world."
0 0 23 29 1 #"\n"
0 0 17 3 38 #"; RETURNS: Hitting \"n\" while a node is"
0 0 23 29 1 #"\n"
0 0 17 3 66
#";   selected adds a new son, whose center has an x-coordinate two "
0 0 23 29 1 #"\n"
0 0 17 3 61
#";   square-lengths to the left of the center of the currently"
0 0 23 29 1 #"\n"
0 0 17 3 64
#";   leftmost son, and a y-coordinate 3 square-lengths down from "
0 0 23 29 1 #"\n"
0 0 17 3 29 #";   the center of the parent."
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; EXAMPLES: (world-after-n (list node2-1)) => (list node2-1)"
0 0 23 29 1 #"\n"
0 0 17 3 32 #"; STRATEGY: Function Composition"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"world-after-n"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 13 #"nodes-after-n"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; node-after-n : Node -> Node"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN : a node"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; RETURNS: if the node is expandable then add a new son to it."
0 0 23 29 1 #"\n"
0 0 17 3 35 #"; else nothing happened to the node"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; EXAMPLES: (node-after-n node2-1) => node2-1"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; STRATEGY: Struct Decomp on n : Node"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"node-after-n"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 14 #"node-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 11 #"add-new-son"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 14 #"node-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 13 #"nodes-after-n"
0 0 23 3 2 #" ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; add-new-son : Node -> Node"
0 0 23 29 1 #"\n"
0 0 17 3 15 #"; GIVEN: a node"
0 0 23 29 1 #"\n"
0 0 17 3 58
#"; RETURNS: if the node is expandable, add a new son to it."
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; if not, it stays unchanged"
0 0 23 29 1 #"\n"
0 0 17 3 44 #"; EXAMPLES: (add-new-son node2-1) => node2-1"
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; STRATEGY: Struct Decomp on n: Node"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"add-new-son"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 16 #"node-expandable?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 14 #"node-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 13 #"make-son-node"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 13 #"nodes-after-n"
0 0 23 3 2 #" ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 14 #"node-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 13 #"nodes-after-n"
0 0 23 3 2 #" ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 30 #"; make-son-node : Node -> Node"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN: a node."
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; RETURNS: a node with new son added to it. If the node has no"
0 0 23 29 1 #"\n"
0 0 17 3 64
#"; children, the son appears directly under the node. If it has a"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #"; son, the new son appears left to the leftmost son by twice of leng"
 #"th"
) 0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #"; EXAMPLES: (make-son-node node1-2) => (make-node 70 360 false empty"
 #")"
) 0 0 23 29 1 #"\n"
0 0 17 3 37 #"; STRATEGY: Struct Decomp on n : Node"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"make-son-node"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 2 #" ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 11 #"DOWN-OFFSET"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 11 #"left-most-x"
0 0 23 3 2 #" ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #")) "
0 0 14 3 11 #"LEFT-OFFSET"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 11 #"DOWN-OFFSET"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; nodes-after-n : LON -> LON"
0 0 23 29 1 #"\n"
0 0 17 3 14 #"; GIVEN: a LON"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; RETURNS: if a node in the LON is expandable and is selected,"
0 0 23 29 1 #"\n"
0 0 17 3 43 #"; then add a new son to it, else do nothing"
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; EXAMPLES: (nodes-after-n (list node2-1)) => (list node2-1)"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; STRATEGY: HOFC"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"nodes-after-n"
0 0 23 3 1 #" "
0 0 14 3 2 #"ns"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 14 #"; Node -> Node"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 16 #"; GIVEN: a node."
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 56 #"; RETURNS: adding a new son to the children of the node "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 19 #"; that is selected."
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 12 #"node-after-n"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 2 #"ns"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 32 #"; world-after-d : World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 17 #"; GIVEN: a world."
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; RETURNS: Hitting \"d\" while a node is selected deletes the "
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; node and its whole subtree."
0 0 23 29 1 #"\n"
0 0 17 3 51 #"; EXAMPLES: (world-after-d (list node2-1)) => empty"
0 0 23 29 1 #"\n"
0 0 17 3 32 #"; STRATEGY: Function Composition"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"world-after-d"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 13 #"nodes-after-d"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; node-after-d : Node -> Node"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN: a node."
0 0 23 29 1 #"\n"
0 0 17 3 64
#"; RETURNS: if the children of the node is selected, delete them."
0 0 23 29 1 #"\n"
0 0 17 3 68
#"; EXAMPLES: (node-after-d node1-1) => (make-node 40 300 false empty)"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; STRATEGY: Struct Decomp on n : Node"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"node-after-d"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 14 #"node-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 13 #"nodes-after-d"
0 0 23 3 2 #" ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; nodes-after-d : LON -> LON"
0 0 23 29 1 #"\n"
0 0 17 3 14 #"; GIVEN: a LON"
0 0 23 29 1 #"\n"
0 0 17 3 63
#"; RETURNS: if the node in the LON is selected, then delete that"
0 0 23 29 1 #"\n"
0 0 17 3 25 #"; node from the whole LON"
0 0 23 29 1 #"\n"
0 0 17 3 51 #"; EXAMPLES: (nodes-after-d (list node2-1)) => empty"
0 0 23 29 1 #"\n"
0 0 17 3 42 #"; STRATEGY: HOFC + Struct Decomp on [Node]"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"nodes-after-d"
0 0 23 3 1 #" "
0 0 14 3 2 #"ns"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 17 #"; Node LON -> LON"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 25 #"; GIVEN: a node and a LON"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 60
#"; RETURNS: if the node is selected, return the original LON."
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 56 #"; if the node is not selected, return a new LON with the"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 13 #"; node added."
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 8 #"ans-rest"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 14 #"node-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 8 #"ans-rest"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 12 #"node-after-d"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 8 #"ans-rest"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 5 #"empty"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 2 #"ns"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 51 #"; world-after-key-event : World MyKeyEvent -> World"
0 0 23 29 1 #"\n"
0 0 17 3 33 #"; GIVEN: a world and a MyKeyEvent"
0 0 23 29 1 #"\n"
0 0 17 3 41 #"; RETURNS: the world after the MyKeyEvent"
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; EXAMPLES: See tests below"
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; STRATEGY: Struct Decomp on kev : MyKeyEvent."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 21 #"world-after-key-event"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 3 #"kev"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"kev"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"t\""
0 0 23 3 3 #") ("
0 0 14 3 13 #"world-after-t"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"kev"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 23 3 3 #") ("
0 0 14 3 13 #"world-after-n"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"kev"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 23 3 3 #") ("
0 0 14 3 13 #"world-after-d"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 7 #"; TESTS"
0 0 23 29 1 #"\n"
0 0 17 3 21 #"; Examples for tests:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 24 #"world1-after-key-event-t"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"80"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 24 #"world1-after-key-event-n"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 3 #"460"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"80"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"80"
0 0 23 3 1 #" "
0 0 20 3 3 #"460"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 7 #")))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 17 #"define-test-suite"
0 0 23 3 1 #" "
0 0 14 3 27 #"world-after-key-event-tests"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 21 #"world-after-key-event"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node1-1"
0 0 23 3 2 #") "
0 0 19 3 3 #"\"t\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 24 #"world1-after-key-event-t"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 19 3 45 #"\"world1-after-key-event-t should be returned\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 21 #"world-after-key-event"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node1-1"
0 0 23 3 2 #") "
0 0 19 3 3 #"\"n\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 24 #"world1-after-key-event-n"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 19 3 45 #"\"world1-after-key-event-n should be returned\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 21 #"world-after-key-event"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node1-1"
0 0 23 3 2 #") "
0 0 19 3 3 #"\"d\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 19 3 61
#"\"If a node is selected then it and it's children are deleted\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 21 #"world-after-key-event"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node1-1"
0 0 23 3 2 #") "
0 0 19 3 3 #"\"e\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node1-1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 19 3 53 #"\"All key events other than t, n, d should be ignored\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"run-tests"
0 0 23 3 1 #" "
0 0 14 3 27 #"world-after-key-event-tests"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #"; world-to-roots : World -> LON"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN: a World"
0 0 23 29 1 #"\n"
0 0 17 3 59
#"; RETURNS: a list of all the root nodes in the given world."
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; EXAMPLES: See tests below"
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; STRATEGY: Domain Knowledge."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"world-to-roots"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 8 #"; TESTS:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 14 #"world-to-roots"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node1-1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node1-1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 19 3 49 #"\"All nodes in the given world should be returned\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #"; node-to-center : Node -> Posn"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN: a node."
0 0 23 29 1 #"\n"
0 0 17 3 78
(
 #"; RETURNS: the center of the given node as it is to be displayed on "
 #"the scene."
) 0 0 23 29 1 #"\n"
0 0 17 3 27 #"; EXAMPLES: See tests below"
0 0 23 29 1 #"\n"
0 0 17 3 38 #"; STRATEGY: Struct Decomp on n : Node."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"node-to-center"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"make-posn"
0 0 23 3 2 #" ("
0 0 14 3 6 #"node-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 6 #"node-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 7 #"; TESTS"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 14 #"node-to-center"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 19 3 51 #"\"posn of the center of the node should be returned\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; node-to-selected? : Node -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; GIVEN: a node."
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; RETURNS: true if the node is selected. else returns false."
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; EXAMPLES: See tests below"
0 0 23 29 1 #"\n"
0 0 17 3 38 #"; STRATEGY: Struct Decomp on n : Node."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"node-to-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 14 #"node-selected?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 7 #"; TESTS"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 17 #"node-to-selected?"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 19 3 59
#"\"The function should return true since node2-1 is selected\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; node-to-sons : Node -> LON"
0 0 23 29 1 #"\n"
0 0 17 3 15 #"; GIVEN: a node"
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; RETURNS: the children of the node."
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; EXAMPLES: See tests below"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; STRATEGY: Struct Decomp on n : Node"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"node-to-sons"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 13 #"node-children"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 7 #"; TESTS"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 12 #"node-to-sons"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 19 3 56
#"\"empty shoudl be returned since node2-1 has no children\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 7 #"; TESTS"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 17 #"define-test-suite"
0 0 23 3 1 #" "
0 0 14 3 16 #"place-node-tests"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 10 #"place-node"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-1"
0 0 23 3 1 #" "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 23 3 2 #") "
0 0 14 3 13 #"node2-1-image"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 19 3 34 #"\"node2-1-image should be returned\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 10 #"place-node"
0 0 23 3 1 #" "
0 0 14 3 7 #"node1-2"
0 0 23 3 1 #" "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 23 3 2 #") "
0 0 14 3 13 #"node1-2-image"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 19 3 34 #"\"node1-2-image should be returned\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"run-tests"
0 0 23 3 1 #" "
0 0 14 3 16 #"place-node-tests"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";-------------------------------------------------------------------"
 #"-----------"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 11 #"place-nodes"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-1"
0 0 23 3 2 #") "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 23 3 2 #") "
0 0 14 3 13 #"node2-1-image"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 19 3 34 #"\"node2-1-image should be returned\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 19 #"selected-node-image"
0 0 23 3 1 #" "
0 0 14 3 7 #"node1-2"
0 0 23 3 2 #") "
0 0 14 3 19 #"SEL-GREEN-RECTANGLE"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 19 3 57
#"\"SEL-GREEN-RECTANGLE should be returned since node1-2 is "
0 0 19 29 1 #"\n"
0 0 19 3 24 #"               selected\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 16 #"node-expandable?"
0 0 23 3 1 #" "
0 0 14 3 7 #"node1-1"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 19 3 58
#"\"false should be returned since node1-1 is not expandable\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 13 #"make-son-node"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-4"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 3 #"160"
0 0 23 3 1 #" "
0 0 20 3 3 #"460"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 19 3 42 #"\"A new node at 160 460 should be returned\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 16 #"draw-connections"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 1 #" "
0 0 20 3 3 #"200"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node2-4"
0 0 23 3 2 #") "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 14 3 30 #"blue-line-image-80-400-200-200"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 19 3 51 #"\"blue-line-image-80-400-200-200 should be returned\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";-------------------------------------------------------------------"
 #"-----------"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 25 #"node1-1-after-button-down"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"80"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 22 #"node-after-button-down"
0 0 23 3 1 #" "
0 0 14 3 7 #"node1-1"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 14 3 25 #"node1-1-after-button-down"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 19 3 46 #"\"node1-1-after-button-down should be returned\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";-------------------------------------------------------------------"
 #"-----------"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 18 #"node1-1-after-drag"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 15 #"node-after-drag"
0 0 23 3 1 #" "
0 0 14 3 7 #"node1-1"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 14 3 18 #"node1-1-after-drag"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 19 3 39 #"\"node1-1-after-drag should be returned\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";-------------------------------------------------------------------"
 #"-----------"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 21 #"nodes1-1-after-update"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 3 #"140"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 3 #"120"
0 0 23 3 1 #" "
0 0 20 3 3 #"500"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 3 #"500"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 3 #"180"
0 0 23 3 1 #" "
0 0 20 3 3 #"500"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 15 #"nodes-update-xy"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"node1-1"
0 0 23 3 2 #") "
0 0 20 3 3 #"100"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 14 3 21 #"nodes1-1-after-update"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 19 3 42 #"\"nodes1-1-after-update should be returned\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 80
(
 #";;------------------------------------------------------------------"
 #"------------"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 23 #"node1-1-after-button-up"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 2 #"80"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 20 #"node-after-button-up"
0 0 23 3 1 #" "
0 0 14 3 7 #"node1-1"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 3 #"400"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 14 3 23 #"node1-1-after-button-up"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 19 3 44 #"\"node1-1-after-button-up should be returned\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0           0
